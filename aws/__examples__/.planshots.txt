

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
+ create
~ update in-place

Terraform will perform the following actions:

+ module.datadog.aws_iam_policy.mod
id:                                          <computed>
arn:                                         <computed>
description:                                 "DataDogReadOnlyPolicy"
name:                                        "DataDogReadOnlyPolicy"
path:                                        "/"
policy:                                      "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"autoscaling:Describe*\",\n        \"budgets:ViewBudget\",\n        \"cloudfront:GetDistributionConfig\",\n        \"cloudfront:ListDistributions\",\n        \"cloudtrail:DescribeTrails\",\n        \"cloudtrail:GetTrailStatus\",\n        \"cloudwatch:Describe*\",\n        \"cloudwatch:Get*\",\n        \"cloudwatch:List*\",\n        \"codedeploy:List*\",\n        \"codedeploy:BatchGet*\",\n        \"directconnect:Describe*\",\n        \"dynamodb:List*\",\n        \"dynamodb:Describe*\",\n        \"ec2:Describe*\",\n        \"ecs:Describe*\",\n        \"ecs:List*\",\n        \"elasticache:Describe*\",\n        \"elasticache:List*\",\n        \"elasticfilesystem:DescribeFileSystems\",\n        \"elasticfilesystem:DescribeTags\",\n        \"elasticloadbalancing:Describe*\",\n        \"elasticmapreduce:List*\",\n        \"elasticmapreduce:Describe*\",\n        \"es:ListTags\",\n        \"es:ListDomainNames\",\n        \"es:DescribeElasticsearchDomains\",\n        \"health:DescribeEvents\",\n        \"health:DescribeEventDetails\",\n        \"health:DescribeAffectedEntities\",\n        \"kinesis:List*\",\n        \"kinesis:Describe*\",\n        \"lambda:AddPermission\",\n        \"lambda:GetPolicy\",\n        \"lambda:List*\",\n        \"lambda:RemovePermission\",\n        \"logs:Get*\",\n        \"logs:Describe*\",\n        \"logs:FilterLogEvents\",\n        \"logs:TestMetricFilter\",\n        \"rds:Describe*\",\n        \"rds:List*\",\n        \"redshift:DescribeClusters\",\n        \"redshift:DescribeLoggingStatus\",\n        \"route53:List*\",\n        \"s3:GetBucketLogging\",\n        \"s3:GetBucketLocation\",\n        \"s3:GetBucketNotification\",\n        \"s3:GetBucketTagging\",\n        \"s3:ListAllMyBuckets\",\n        \"s3:PutBucketNotification\",\n        \"ses:Get*\",\n        \"sns:List*\",\n        \"sns:Publish\",\n        \"sqs:ListQueues\",\n        \"support:*\",\n        \"tag:getResources\",\n        \"tag:getTagKeys\",\n        \"tag:getTagValues\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\n"

+ module.datadog.aws_iam_policy_attachment.mod
id:                                          <computed>
name:                                        "Allow Datadog PolicyAccess via Role"
policy_arn:                                  "${aws_iam_policy.mod.arn}"
roles.#:                                     "1"
roles.2812037976:                            "DataDogReadOnlyRole"

+ module.datadog.aws_iam_role.mod
id:                                          <computed>
arn:                                         <computed>
assume_role_policy:                          "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": {\n    \"Effect\": \"Allow\",\n    \"Principal\": { \"AWS\": \"arn:aws:iam::464622532012:root\" },\n    \"Action\": \"sts:AssumeRole\",\n    \"Condition\": {\n      \"StringEquals\": {\n        \"sts:ExternalId\": \"123456789\"\n      }\n    }\n  }\n}\n"
create_date:                                 <computed>
force_detach_policies:                       "false"
max_session_duration:                        "3600"
name:                                        "DataDogReadOnlyRole"
path:                                        "/"
unique_id:                                   <computed>

+ module.ec2.aws_instance.mod[0]
id:                                          <computed>
ami:                                         "ami-0ff8a91507f77f867"
arn:                                         <computed>
associate_public_ip_address:                 "true"
availability_zone:                           <computed>
cpu_core_count:                              <computed>
cpu_threads_per_core:                        <computed>
ebs_block_device.#:                          <computed>
ebs_optimized:                               "false"
ephemeral_block_device.#:                    <computed>
get_password_data:                           "false"
instance_state:                              <computed>
instance_type:                               "t2.small"
ipv6_address_count:                          <computed>
ipv6_addresses.#:                            <computed>
key_name:                                    "ec2-key"
network_interface.#:                         <computed>
network_interface_id:                        <computed>
password_data:                               <computed>
placement_group:                             <computed>
primary_network_interface_id:                <computed>
private_dns:                                 <computed>
private_ip:                                  <computed>
public_dns:                                  <computed>
public_ip:                                   <computed>
root_block_device.#:                         "1"
root_block_device.0.delete_on_termination:   "true"
root_block_device.0.volume_id:               <computed>
root_block_device.0.volume_size:             "16"
root_block_device.0.volume_type:             "gp2"
security_groups.#:                           <computed>
source_dest_check:                           "true"
subnet_id:                                   "${element(var.subnets, count.index)}"
tags.%:                                      "2"
tags.Environment:                            "production"
tags.Name:                                   "app01"
tenancy:                                     <computed>
volume_tags.%:                               <computed>
vpc_security_group_ids.#:                    <computed>

+ module.ec2.aws_instance.mod[1]
id:                                          <computed>
ami:                                         "ami-0ff8a91507f77f867"
arn:                                         <computed>
associate_public_ip_address:                 "true"
availability_zone:                           <computed>
cpu_core_count:                              <computed>
cpu_threads_per_core:                        <computed>
ebs_block_device.#:                          <computed>
ebs_optimized:                               "false"
ephemeral_block_device.#:                    <computed>
get_password_data:                           "false"
instance_state:                              <computed>
instance_type:                               "t2.small"
ipv6_address_count:                          <computed>
ipv6_addresses.#:                            <computed>
key_name:                                    "ec2-key"
network_interface.#:                         <computed>
network_interface_id:                        <computed>
password_data:                               <computed>
placement_group:                             <computed>
primary_network_interface_id:                <computed>
private_dns:                                 <computed>
private_ip:                                  <computed>
public_dns:                                  <computed>
public_ip:                                   <computed>
root_block_device.#:                         "1"
root_block_device.0.delete_on_termination:   "true"
root_block_device.0.volume_id:               <computed>
root_block_device.0.volume_size:             "16"
root_block_device.0.volume_type:             "gp2"
security_groups.#:                           <computed>
source_dest_check:                           "true"
subnet_id:                                   "${element(var.subnets, count.index)}"
tags.%:                                      "2"
tags.Environment:                            "production"
tags.Name:                                   "app02"
tenancy:                                     <computed>
volume_tags.%:                               <computed>
vpc_security_group_ids.#:                    <computed>

+ module.ec2.aws_security_group.security_group_on_instances
id:                                          <computed>
arn:                                         <computed>
description:                                 "Managed by Terraform"
egress.#:                                    <computed>
ingress.#:                                   <computed>
name:                                        "app-ec2-instances"
owner_id:                                    <computed>
revoke_rules_on_delete:                      "false"
tags.%:                                      "1"
tags.Name:                                   "app-ec2-instances"
vpc_id:                                      "${var.vpc_id}"

+ module.ec2.aws_security_group_rule.all_egress_on_instances_to_anywhere
id:                                          <computed>
cidr_blocks.#:                               "1"
cidr_blocks.0:                               "0.0.0.0/0"
from_port:                                   "0"
protocol:                                    "-1"
security_group_id:                           "${aws_security_group.security_group_on_instances.id}"
self:                                        "false"
source_security_group_id:                    <computed>
to_port:                                     "0"
type:                                        "egress"

+ module.ec2.aws_security_group_rule.all_ingress_on_instances_from_self
id:                                          <computed>
from_port:                                   "0"
protocol:                                    "-1"
security_group_id:                           "${aws_security_group.security_group_on_instances.id}"
self:                                        "true"
source_security_group_id:                    <computed>
to_port:                                     "0"
type:                                        "ingress"

+ module.ec2.aws_security_group_rule.ssh_ingress_on_instances_from_anywhere
id:                                          <computed>
cidr_blocks.#:                               "1"
cidr_blocks.0:                               "0.0.0.0/0"
from_port:                                   "22"
protocol:                                    "tcp"
security_group_id:                           "${aws_security_group.security_group_on_instances.id}"
self:                                        "false"
source_security_group_id:                    <computed>
to_port:                                     "22"
type:                                        "ingress"

+ module.memcached.aws_elasticache_cluster.mod
id:                                          <computed>
apply_immediately:                           <computed>
availability_zone:                           <computed>
az_mode:                                     <computed>
cache_nodes.#:                               <computed>
cluster_address:                             <computed>
cluster_id:                                  "memcached-production"
configuration_endpoint:                      <computed>
engine:                                      "memcached"
engine_version:                              "3.2.10"
maintenance_window:                          <computed>
node_type:                                   "cache.t2.micro"
num_cache_nodes:                             "1"
parameter_group_name:                        "memcached-production-params32"
port:                                        "11211"
replication_group_id:                        <computed>
security_group_ids.#:                        <computed>
security_group_names.#:                      <computed>
snapshot_window:                             <computed>
subnet_group_name:                           "memcached-production-memcached-subnet"
tags.%:                                      "2"
tags.Description:                            "memcached production memcached instance"
tags.Environment:                            "production"

+ module.memcached.aws_elasticache_parameter_group.mod
id:                                          <computed>
description:                                 "memcached production env memcached cluster param group"
family:                                      "memcached3.2"
name:                                        "memcached-production-params32"

+ module.memcached.aws_elasticache_subnet_group.mod
id:                                          <computed>
description:                                 "memcached-production-memcached-subnet"
name:                                        "memcached-production-memcached-subnet"
subnet_ids.#:                                <computed>

+ module.memcached.aws_security_group.sg_on_elasticache_instance
id:                                          <computed>
arn:                                         <computed>
description:                                 "memcached to memcached_production"
egress.#:                                    "1"
egress.482069346.cidr_blocks.#:              "1"
egress.482069346.cidr_blocks.0:              "0.0.0.0/0"
egress.482069346.description:                ""
egress.482069346.from_port:                  "0"
egress.482069346.ipv6_cidr_blocks.#:         "0"
egress.482069346.prefix_list_ids.#:          "0"
egress.482069346.protocol:                   "-1"
egress.482069346.security_groups.#:          "0"
egress.482069346.self:                       "false"
egress.482069346.to_port:                    "0"
ingress.#:                                   "1"
ingress.1333864030.cidr_blocks.#:            "0"
ingress.1333864030.description:              ""
ingress.1333864030.from_port:                "11211"
ingress.1333864030.ipv6_cidr_blocks.#:       "0"
ingress.1333864030.protocol:                 "tcp"
ingress.1333864030.security_groups.#:        "0"
ingress.1333864030.self:                     "false"
ingress.1333864030.to_port:                  "11211"
name:                                        "memcached-memcached_production"
owner_id:                                    <computed>
revoke_rules_on_delete:                      "false"
tags.%:                                      "1"
tags.Name:                                   "memcached-production"
vpc_id:                                      "${var.vpc_id}"

+ module.mysql.aws_db_instance.mod
id:                                          <computed>
address:                                     <computed>
allocated_storage:                           "5"
allow_major_version_upgrade:                 "true"
apply_immediately:                           "true"
arn:                                         <computed>
auto_minor_version_upgrade:                  "true"
availability_zone:                           <computed>
backup_retention_period:                     "7"
backup_window:                               <computed>
ca_cert_identifier:                          <computed>
character_set_name:                          <computed>
copy_tags_to_snapshot:                       "false"
db_subnet_group_name:                        "test-mysql-production-mysql-sg"
endpoint:                                    <computed>
engine:                                      "mysql"
engine_version:                              "5.7"
final_snapshot_identifier:                   "test-mysql-production-mysql-final-snapshot"
hosted_zone_id:                              <computed>
identifier:                                  "test-mysql-production-mysql"
identifier_prefix:                           <computed>
instance_class:                              "db.t2.medium"
kms_key_id:                                  <computed>
license_model:                               <computed>
maintenance_window:                          <computed>
monitoring_interval:                         "0"
monitoring_role_arn:                         <computed>
multi_az:                                    "true"
name:                                        <computed>
option_group_name:                           "default:mysql-5-7"
parameter_group_name:                        "test-mysql-production-mysql57"
password:                                    <sensitive>
port:                                        <computed>
publicly_accessible:                         "true"
replicas.#:                                  <computed>
resource_id:                                 <computed>
skip_final_snapshot:                         "false"
status:                                      <computed>
storage_encrypted:                           "false"
storage_type:                                "gp2"
timezone:                                    <computed>
username:                                    "test-mysqladmin"
vpc_security_group_ids.#:                    <computed>

+ module.mysql.aws_db_parameter_group.mod
id:                                          <computed>
arn:                                         <computed>
description:                                 "mysql5.7 parameter group for test-mysql production"
family:                                      "mysql5.7"
name:                                        "test-mysql-production-mysql57"
name_prefix:                                 <computed>

+ module.mysql.aws_db_subnet_group.mod
id:                                          <computed>
arn:                                         <computed>
description:                                 "test-mysql production db mysql subnet group"
name:                                        "test-mysql-production-mysql-sg"
name_prefix:                                 <computed>
subnet_ids.#:                                <computed>

+ module.mysql.aws_security_group.sg_on_rds_instance
id:                                          <computed>
arn:                                         <computed>
description:                                 "rds-test-mysql_production-mysql"
egress.#:                                    "1"
egress.482069346.cidr_blocks.#:              "1"
egress.482069346.cidr_blocks.0:              "0.0.0.0/0"
egress.482069346.description:                ""
egress.482069346.from_port:                  "0"
egress.482069346.ipv6_cidr_blocks.#:         "0"
egress.482069346.prefix_list_ids.#:          "0"
egress.482069346.protocol:                   "-1"
egress.482069346.security_groups.#:          "0"
egress.482069346.self:                       "false"
egress.482069346.to_port:                    "0"
ingress.#:                                   "1"
ingress.471043921.cidr_blocks.#:             "0"
ingress.471043921.description:               ""
ingress.471043921.from_port:                 "3306"
ingress.471043921.ipv6_cidr_blocks.#:        "0"
ingress.471043921.protocol:                  "tcp"
ingress.471043921.security_groups.#:         "0"
ingress.471043921.self:                      "false"
ingress.471043921.to_port:                   "3306"
name:                                        "rds-test-mysql_production-mysql"
owner_id:                                    <computed>
revoke_rules_on_delete:                      "false"
tags.%:                                      "1"
tags.Name:                                   "rds-test-mysql_production-mysql"
vpc_id:                                      "${var.vpc_id}"

+ module.postgres.aws_db_instance.mod
id:                                          <computed>
address:                                     <computed>
allocated_storage:                           "5"
allow_major_version_upgrade:                 "true"
apply_immediately:                           "true"
arn:                                         <computed>
auto_minor_version_upgrade:                  "true"
availability_zone:                           <computed>
backup_retention_period:                     "7"
backup_window:                               <computed>
ca_cert_identifier:                          <computed>
character_set_name:                          <computed>
copy_tags_to_snapshot:                       "false"
db_subnet_group_name:                        "test-postgres-production-pg-sg"
endpoint:                                    <computed>
engine:                                      "postgres"
engine_version:                              "9.6"
final_snapshot_identifier:                   "test-postgres-production-postgres-final-snapshot"
hosted_zone_id:                              <computed>
identifier:                                  "test-postgres-production-postgres"
identifier_prefix:                           <computed>
instance_class:                              "db.t2.medium"
kms_key_id:                                  <computed>
license_model:                               <computed>
maintenance_window:                          <computed>
monitoring_interval:                         "0"
monitoring_role_arn:                         <computed>
multi_az:                                    "true"
name:                                        <computed>
option_group_name:                           "default:postgres-9-6"
parameter_group_name:                        "test-postgres-production-pg96"
password:                                    <sensitive>
port:                                        <computed>
publicly_accessible:                         "true"
replicas.#:                                  <computed>
resource_id:                                 <computed>
skip_final_snapshot:                         "false"
status:                                      <computed>
storage_encrypted:                           "false"
storage_type:                                "gp2"
timezone:                                    <computed>
username:                                    "test-postgresadmin"
vpc_security_group_ids.#:                    <computed>

+ module.postgres.aws_db_parameter_group.mod
id:                                          <computed>
arn:                                         <computed>
description:                                 "postgres9.6 parameter group for test-postgres production"
family:                                      "postgres9.6"
name:                                        "test-postgres-production-pg96"
name_prefix:                                 <computed>

+ module.postgres.aws_db_subnet_group.mod
id:                                          <computed>
arn:                                         <computed>
description:                                 "test-postgres production db postgres subnet group"
name:                                        "test-postgres-production-pg-sg"
name_prefix:                                 <computed>
subnet_ids.#:                                <computed>

+ module.postgres.aws_security_group.sg_on_rds_instance
id:                                          <computed>
arn:                                         <computed>
description:                                 "rds-test-postgres_production-pg"
egress.#:                                    "1"
egress.482069346.cidr_blocks.#:              "1"
egress.482069346.cidr_blocks.0:              "0.0.0.0/0"
egress.482069346.description:                ""
egress.482069346.from_port:                  "0"
egress.482069346.ipv6_cidr_blocks.#:         "0"
egress.482069346.prefix_list_ids.#:          "0"
egress.482069346.protocol:                   "-1"
egress.482069346.security_groups.#:          "0"
egress.482069346.self:                       "false"
egress.482069346.to_port:                    "0"
ingress.#:                                   "1"
ingress.2994424545.cidr_blocks.#:            "0"
ingress.2994424545.description:              ""
ingress.2994424545.from_port:                "5432"
ingress.2994424545.ipv6_cidr_blocks.#:       "0"
ingress.2994424545.protocol:                 "tcp"
ingress.2994424545.security_groups.#:        "0"
ingress.2994424545.self:                     "false"
ingress.2994424545.to_port:                  "5432"
name:                                        "rds-test-postgres_production-pg"
owner_id:                                    <computed>
revoke_rules_on_delete:                      "false"
tags.%:                                      "1"
tags.Name:                                   "rds-test-postgres_production-pg"
vpc_id:                                      "${var.vpc_id}"

+ module.redis.aws_elasticache_cluster.mod
id:                                          <computed>
apply_immediately:                           <computed>
availability_zone:                           <computed>
az_mode:                                     <computed>
cache_nodes.#:                               <computed>
cluster_address:                             <computed>
cluster_id:                                  "redis-production"
configuration_endpoint:                      <computed>
engine:                                      "redis"
engine_version:                              "3.2.4"
maintenance_window:                          <computed>
node_type:                                   "cache.t2.micro"
num_cache_nodes:                             "1"
parameter_group_name:                        "redis-production-params32"
port:                                        "6379"
replication_group_id:                        <computed>
security_group_ids.#:                        <computed>
security_group_names.#:                      <computed>
snapshot_window:                             <computed>
subnet_group_name:                           "redis-production-redis-subnet"
tags.%:                                      "2"
tags.Description:                            "redis production redis instance"
tags.Environment:                            "production"

+ module.redis.aws_elasticache_parameter_group.mod
id:                                          <computed>
description:                                 "redis production env redis cluster param group"
family:                                      "redis3.2"
name:                                        "redis-production-params32"

+ module.redis.aws_elasticache_subnet_group.mod
id:                                          <computed>
description:                                 "redis-production-redis-subnet"
name:                                        "redis-production-redis-subnet"
subnet_ids.#:                                <computed>

+ module.redis.aws_security_group.sg_on_elasticache_instance
id:                                          <computed>
arn:                                         <computed>
description:                                 "redis to redis_production"
egress.#:                                    "1"
egress.482069346.cidr_blocks.#:              "1"
egress.482069346.cidr_blocks.0:              "0.0.0.0/0"
egress.482069346.description:                ""
egress.482069346.from_port:                  "0"
egress.482069346.ipv6_cidr_blocks.#:         "0"
egress.482069346.prefix_list_ids.#:          "0"
egress.482069346.protocol:                   "-1"
egress.482069346.security_groups.#:          "0"
egress.482069346.self:                       "false"
egress.482069346.to_port:                    "0"
ingress.#:                                   "1"
ingress.743784797.cidr_blocks.#:             "0"
ingress.743784797.description:               ""
ingress.743784797.from_port:                 "6379"
ingress.743784797.ipv6_cidr_blocks.#:        "0"
ingress.743784797.protocol:                  "tcp"
ingress.743784797.security_groups.#:         "0"
ingress.743784797.self:                      "false"
ingress.743784797.to_port:                   "6379"
name:                                        "redis-redis_production"
owner_id:                                    <computed>
revoke_rules_on_delete:                      "false"
tags.%:                                      "1"
tags.Name:                                   "redis-production"
vpc_id:                                      "${var.vpc_id}"

+ module.ssh.aws_security_group.mod
id:                                          <computed>
arn:                                         <computed>
description:                                 "ssh-prod"
egress.#:                                    "1"
egress.482069346.cidr_blocks.#:              "1"
egress.482069346.cidr_blocks.0:              "0.0.0.0/0"
egress.482069346.description:                ""
egress.482069346.from_port:                  "0"
egress.482069346.ipv6_cidr_blocks.#:         "0"
egress.482069346.prefix_list_ids.#:          "0"
egress.482069346.protocol:                   "-1"
egress.482069346.security_groups.#:          "0"
egress.482069346.self:                       "false"
egress.482069346.to_port:                    "0"
ingress.#:                                   "2"
ingress.2541437006.cidr_blocks.#:            "1"
ingress.2541437006.cidr_blocks.0:            "0.0.0.0/0"
ingress.2541437006.description:              ""
ingress.2541437006.from_port:                "22"
ingress.2541437006.ipv6_cidr_blocks.#:       "0"
ingress.2541437006.protocol:                 "tcp"
ingress.2541437006.security_groups.#:        "0"
ingress.2541437006.self:                     "false"
ingress.2541437006.to_port:                  "22"
ingress.753360330.cidr_blocks.#:             "0"
ingress.753360330.description:               ""
ingress.753360330.from_port:                 "0"
ingress.753360330.ipv6_cidr_blocks.#:        "0"
ingress.753360330.protocol:                  "-1"
ingress.753360330.security_groups.#:         "0"
ingress.753360330.self:                      "true"
ingress.753360330.to_port:                   "0"
name:                                        "ssh-prod"
owner_id:                                    <computed>
revoke_rules_on_delete:                      "false"
tags.%:                                      "2"
tags.Environment:                            "prod"
tags.Name:                                   "ssh-prod"
vpc_id:                                      "${var.vpc_id}"

~ module.subnets.data.aws_vpc.current
id:                                          "" => "${var.vpc_id}"
arn:                                         "" => <computed>
cidr_block:                                  "" => <computed>
cidr_block_associations.#:                   "" => <computed>
default:                                     "" => <computed>
dhcp_options_id:                             "" => <computed>
enable_dns_hostnames:                        "" => <computed>
enable_dns_support:                          "" => <computed>
instance_tenancy:                            "" => <computed>
ipv6_association_id:                         "" => <computed>
ipv6_cidr_block:                             "" => <computed>
state:                                       "" => <computed>
tags.%:                                      "" => <computed>

+ module.subnets.aws_route_table.mod_private
id:                                          <computed>
propagating_vgws.#:                          <computed>
route.#:                                     <computed>
tags.%:                                      "1"
tags.Name:                                   "subnets-private"
vpc_id:                                      "${var.vpc_id}"

+ module.subnets.aws_route_table.mod_public
id:                                          <computed>
propagating_vgws.#:                          <computed>
route.#:                                     "1"
route.~3983625677.cidr_block:                "0.0.0.0/0"
route.~3983625677.egress_only_gateway_id:    ""
route.~3983625677.gateway_id:                "${var.internet_gateway_id}"
route.~3983625677.instance_id:               ""
route.~3983625677.ipv6_cidr_block:           ""
route.~3983625677.nat_gateway_id:            ""
route.~3983625677.network_interface_id:      ""
route.~3983625677.vpc_peering_connection_id: ""
tags.%:                                      "1"
tags.Name:                                   "subnets-public"
vpc_id:                                      "${var.vpc_id}"

+ module.subnets.aws_route_table_association.mod_private[0]
id:                                          <computed>
route_table_id:                              "${aws_route_table.mod_private.id}"
subnet_id:                                   "${element(aws_subnet.mod_private.*.id, count.index)}"

+ module.subnets.aws_route_table_association.mod_private[1]
id:                                          <computed>
route_table_id:                              "${aws_route_table.mod_private.id}"
subnet_id:                                   "${element(aws_subnet.mod_private.*.id, count.index)}"

+ module.subnets.aws_route_table_association.mod_private[2]
id:                                          <computed>
route_table_id:                              "${aws_route_table.mod_private.id}"
subnet_id:                                   "${element(aws_subnet.mod_private.*.id, count.index)}"

+ module.subnets.aws_route_table_association.mod_private[3]
id:                                          <computed>
route_table_id:                              "${aws_route_table.mod_private.id}"
subnet_id:                                   "${element(aws_subnet.mod_private.*.id, count.index)}"

+ module.subnets.aws_route_table_association.mod_private[4]
id:                                          <computed>
route_table_id:                              "${aws_route_table.mod_private.id}"
subnet_id:                                   "${element(aws_subnet.mod_private.*.id, count.index)}"

+ module.subnets.aws_route_table_association.mod_private[5]
id:                                          <computed>
route_table_id:                              "${aws_route_table.mod_private.id}"
subnet_id:                                   "${element(aws_subnet.mod_private.*.id, count.index)}"

+ module.subnets.aws_route_table_association.mod_public[0]
id:                                          <computed>
route_table_id:                              "${aws_route_table.mod_public.id}"
subnet_id:                                   "${element(aws_subnet.mod_public.*.id, count.index)}"

+ module.subnets.aws_route_table_association.mod_public[1]
id:                                          <computed>
route_table_id:                              "${aws_route_table.mod_public.id}"
subnet_id:                                   "${element(aws_subnet.mod_public.*.id, count.index)}"

+ module.subnets.aws_route_table_association.mod_public[2]
id:                                          <computed>
route_table_id:                              "${aws_route_table.mod_public.id}"
subnet_id:                                   "${element(aws_subnet.mod_public.*.id, count.index)}"

+ module.subnets.aws_route_table_association.mod_public[3]
id:                                          <computed>
route_table_id:                              "${aws_route_table.mod_public.id}"
subnet_id:                                   "${element(aws_subnet.mod_public.*.id, count.index)}"

+ module.subnets.aws_route_table_association.mod_public[4]
id:                                          <computed>
route_table_id:                              "${aws_route_table.mod_public.id}"
subnet_id:                                   "${element(aws_subnet.mod_public.*.id, count.index)}"

+ module.subnets.aws_route_table_association.mod_public[5]
id:                                          <computed>
route_table_id:                              "${aws_route_table.mod_public.id}"
subnet_id:                                   "${element(aws_subnet.mod_public.*.id, count.index)}"

+ module.subnets.aws_subnet.mod_private[0]
id:                                          <computed>
arn:                                         <computed>
assign_ipv6_address_on_creation:             "false"
availability_zone:                           "us-east-1a"
cidr_block:                                  "${cidrsubnet(data.aws_vpc.current.cidr_block, var.private_newbits, var.private_netnum_offset + element(data.template_file.az_to_netnum.*.rendered, count.index))}"
ipv6_cidr_block:                             <computed>
ipv6_cidr_block_association_id:              <computed>
map_public_ip_on_launch:                     "false"
tags.%:                                      "1"
tags.Name:                                   "subnets-us-east-1a-private"
vpc_id:                                      "${var.vpc_id}"

+ module.subnets.aws_subnet.mod_private[1]
id:                                          <computed>
arn:                                         <computed>
assign_ipv6_address_on_creation:             "false"
availability_zone:                           "us-east-1b"
cidr_block:                                  "${cidrsubnet(data.aws_vpc.current.cidr_block, var.private_newbits, var.private_netnum_offset + element(data.template_file.az_to_netnum.*.rendered, count.index))}"
ipv6_cidr_block:                             <computed>
ipv6_cidr_block_association_id:              <computed>
map_public_ip_on_launch:                     "false"
tags.%:                                      "1"
tags.Name:                                   "subnets-us-east-1b-private"
vpc_id:                                      "${var.vpc_id}"

+ module.subnets.aws_subnet.mod_private[2]
id:                                          <computed>
arn:                                         <computed>
assign_ipv6_address_on_creation:             "false"
availability_zone:                           "us-east-1c"
cidr_block:                                  "${cidrsubnet(data.aws_vpc.current.cidr_block, var.private_newbits, var.private_netnum_offset + element(data.template_file.az_to_netnum.*.rendered, count.index))}"
ipv6_cidr_block:                             <computed>
ipv6_cidr_block_association_id:              <computed>
map_public_ip_on_launch:                     "false"
tags.%:                                      "1"
tags.Name:                                   "subnets-us-east-1c-private"
vpc_id:                                      "${var.vpc_id}"

+ module.subnets.aws_subnet.mod_private[3]
id:                                          <computed>
arn:                                         <computed>
assign_ipv6_address_on_creation:             "false"
availability_zone:                           "us-east-1d"
cidr_block:                                  "${cidrsubnet(data.aws_vpc.current.cidr_block, var.private_newbits, var.private_netnum_offset + element(data.template_file.az_to_netnum.*.rendered, count.index))}"
ipv6_cidr_block:                             <computed>
ipv6_cidr_block_association_id:              <computed>
map_public_ip_on_launch:                     "false"
tags.%:                                      "1"
tags.Name:                                   "subnets-us-east-1d-private"
vpc_id:                                      "${var.vpc_id}"

+ module.subnets.aws_subnet.mod_private[4]
id:                                          <computed>
arn:                                         <computed>
assign_ipv6_address_on_creation:             "false"
availability_zone:                           "us-east-1e"
cidr_block:                                  "${cidrsubnet(data.aws_vpc.current.cidr_block, var.private_newbits, var.private_netnum_offset + element(data.template_file.az_to_netnum.*.rendered, count.index))}"
ipv6_cidr_block:                             <computed>
ipv6_cidr_block_association_id:              <computed>
map_public_ip_on_launch:                     "false"
tags.%:                                      "1"
tags.Name:                                   "subnets-us-east-1e-private"
vpc_id:                                      "${var.vpc_id}"

+ module.subnets.aws_subnet.mod_private[5]
id:                                          <computed>
arn:                                         <computed>
assign_ipv6_address_on_creation:             "false"
availability_zone:                           "us-east-1f"
cidr_block:                                  "${cidrsubnet(data.aws_vpc.current.cidr_block, var.private_newbits, var.private_netnum_offset + element(data.template_file.az_to_netnum.*.rendered, count.index))}"
ipv6_cidr_block:                             <computed>
ipv6_cidr_block_association_id:              <computed>
map_public_ip_on_launch:                     "false"
tags.%:                                      "1"
tags.Name:                                   "subnets-us-east-1f-private"
vpc_id:                                      "${var.vpc_id}"

+ module.subnets.aws_subnet.mod_public[0]
id:                                          <computed>
arn:                                         <computed>
assign_ipv6_address_on_creation:             "false"
availability_zone:                           "us-east-1a"
cidr_block:                                  "${cidrsubnet(data.aws_vpc.current.cidr_block, var.public_newbits, var.public_netnum_offset + element(data.template_file.az_to_netnum.*.rendered, count.index))}"
ipv6_cidr_block:                             <computed>
ipv6_cidr_block_association_id:              <computed>
map_public_ip_on_launch:                     "true"
tags.%:                                      "1"
tags.Name:                                   "subnets-us-east-1a-public"
vpc_id:                                      "${var.vpc_id}"

+ module.subnets.aws_subnet.mod_public[1]
id:                                          <computed>
arn:                                         <computed>
assign_ipv6_address_on_creation:             "false"
availability_zone:                           "us-east-1b"
cidr_block:                                  "${cidrsubnet(data.aws_vpc.current.cidr_block, var.public_newbits, var.public_netnum_offset + element(data.template_file.az_to_netnum.*.rendered, count.index))}"
ipv6_cidr_block:                             <computed>
ipv6_cidr_block_association_id:              <computed>
map_public_ip_on_launch:                     "true"
tags.%:                                      "1"
tags.Name:                                   "subnets-us-east-1b-public"
vpc_id:                                      "${var.vpc_id}"

+ module.subnets.aws_subnet.mod_public[2]
id:                                          <computed>
arn:                                         <computed>
assign_ipv6_address_on_creation:             "false"
availability_zone:                           "us-east-1c"
cidr_block:                                  "${cidrsubnet(data.aws_vpc.current.cidr_block, var.public_newbits, var.public_netnum_offset + element(data.template_file.az_to_netnum.*.rendered, count.index))}"
ipv6_cidr_block:                             <computed>
ipv6_cidr_block_association_id:              <computed>
map_public_ip_on_launch:                     "true"
tags.%:                                      "1"
tags.Name:                                   "subnets-us-east-1c-public"
vpc_id:                                      "${var.vpc_id}"

+ module.subnets.aws_subnet.mod_public[3]
id:                                          <computed>
arn:                                         <computed>
assign_ipv6_address_on_creation:             "false"
availability_zone:                           "us-east-1d"
cidr_block:                                  "${cidrsubnet(data.aws_vpc.current.cidr_block, var.public_newbits, var.public_netnum_offset + element(data.template_file.az_to_netnum.*.rendered, count.index))}"
ipv6_cidr_block:                             <computed>
ipv6_cidr_block_association_id:              <computed>
map_public_ip_on_launch:                     "true"
tags.%:                                      "1"
tags.Name:                                   "subnets-us-east-1d-public"
vpc_id:                                      "${var.vpc_id}"

+ module.subnets.aws_subnet.mod_public[4]
id:                                          <computed>
arn:                                         <computed>
assign_ipv6_address_on_creation:             "false"
availability_zone:                           "us-east-1e"
cidr_block:                                  "${cidrsubnet(data.aws_vpc.current.cidr_block, var.public_newbits, var.public_netnum_offset + element(data.template_file.az_to_netnum.*.rendered, count.index))}"
ipv6_cidr_block:                             <computed>
ipv6_cidr_block_association_id:              <computed>
map_public_ip_on_launch:                     "true"
tags.%:                                      "1"
tags.Name:                                   "subnets-us-east-1e-public"
vpc_id:                                      "${var.vpc_id}"

+ module.subnets.aws_subnet.mod_public[5]
id:                                          <computed>
arn:                                         <computed>
assign_ipv6_address_on_creation:             "false"
availability_zone:                           "us-east-1f"
cidr_block:                                  "${cidrsubnet(data.aws_vpc.current.cidr_block, var.public_newbits, var.public_netnum_offset + element(data.template_file.az_to_netnum.*.rendered, count.index))}"
ipv6_cidr_block:                             <computed>
ipv6_cidr_block_association_id:              <computed>
map_public_ip_on_launch:                     "true"
tags.%:                                      "1"
tags.Name:                                   "subnets-us-east-1f-public"
vpc_id:                                      "${var.vpc_id}"

+ module.trustee.aws_iam_group_policy.mod
id:                                          <computed>
group:                                       "Operations"
name:                                        "ClientCrossAccountPolicy"
policy:                                      "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": {\n    \"Effect\": \"Allow\",\n    \"Action\": \"sts:AssumeRole\",\n    \"Resource\": \"arn:aws:iam::1111111111111:role/TableXICrossAccountAccessRole\"\n  }\n}\n"

+ module.trustor.aws_iam_policy.mod
id:                                          <computed>
arn:                                         <computed>
description:                                 "TableXI full access policy with delete provisions for cross account access."
name:                                        "TableXICrossAccountAdminAccess"
path:                                        "/"
policy:                                      "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Deny\",\n      \"Action\": [\n        \"dynamodb:DeleteTable\",\n        \"rds:DeleteDBCluster\",\n        \"rds:DeleteDBInstance\",\n        \"s3:DeleteBucket\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n"

+ module.trustor.aws_iam_policy_attachment.mod
id:                                          <computed>
name:                                        "TableXICrossAccountAdminAccess"
policy_arn:                                  "${aws_iam_policy.mod.arn}"
roles.#:                                     "1"
roles.3356258093:                            "TableXICrossAccountAccessRole"

+ module.trustor.aws_iam_role.mod
id:                                          <computed>
arn:                                         <computed>
assume_role_policy:                          "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::000000000000:root\"\n      }\n    }\n  ]\n}"
create_date:                                 <computed>
force_detach_policies:                       "false"
max_session_duration:                        "3600"
name:                                        "TableXICrossAccountAccessRole"
path:                                        "/"
unique_id:                                   <computed>

+ module.trustor_readonly.aws_iam_policy.mod
id:                                          <computed>
arn:                                         <computed>
description:                                 "TXIReadOnly full access policy with delete provisions for cross account access."
name:                                        "TXIReadOnlyCrossAccountAdminAccess"
path:                                        "/"
policy:                                      "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"xray:Get*\",\n        \"xray:BatchGet*\",\n        \"workspaces:Describe*\",\n        \"workmail:Search*\",\n        \"workmail:List*\",\n        \"workmail:Get*\",\n        \"workmail:Describe*\",\n        \"workdocs:Get*\",\n        \"workdocs:Describe*\",\n        \"workdocs:CheckAlias\",\n        \"waf:List*\",\n        \"waf:Get*\",\n        \"waf-regional:List*\",\n        \"waf-regional:Get*\",\n        \"trustedadvisor:Describe*\",\n        \"tag:Get*\",\n        \"swf:List*\",\n        \"swf:Get*\",\n        \"swf:Describe*\",\n        \"swf:Count*\",\n        \"sts:Get*\",\n        \"storagegateway:List*\",\n        \"storagegateway:Describe*\",\n        \"states:List*\",\n        \"states:GetExecutionHistory\",\n        \"states:Describe*\",\n        \"ssm:List*\",\n        \"ssm:Get*\",\n        \"ssm:Describe*\",\n        \"sqs:Receive*\",\n        \"sqs:List*\",\n        \"sqs:Get*\",\n        \"sns:List*\",\n        \"sns:Get*\",\n        \"sns:Check*\",\n        \"shield:List*\",\n        \"shield:Describe*\",\n        \"ses:Verify*\",\n        \"ses:List*\",\n        \"ses:Get*\",\n        \"ses:Describe*\",\n        \"servicecatalog:Search*\",\n        \"servicecatalog:Scan*\",\n        \"servicecatalog:List*\",\n        \"servicecatalog:Describe*\",\n        \"sdb:Select*\",\n        \"sdb:List*\",\n        \"sdb:Get*\",\n        \"s3:List*\",\n        \"s3:Head*\",\n        \"s3:Get*\",\n        \"route53domains:View*\",\n        \"route53domains:List*\",\n        \"route53domains:Get*\",\n        \"route53domains:Check*\",\n        \"route53:Test*\",\n        \"route53:List*\",\n        \"route53:Get*\",\n        \"rekognition:Search*\",\n        \"rekognition:List*\",\n        \"rekognition:Detect*\",\n        \"rekognition:CompareFaces\",\n        \"redshift:View*\",\n        \"redshift:Get*\",\n        \"redshift:Describe*\",\n        \"rds:List*\",\n        \"rds:Download*\",\n        \"rds:Describe*\",\n        \"polly:SynthesizeSpeech\",\n        \"polly:List*\",\n        \"polly:Get*\",\n        \"polly:Describe*\",\n        \"organizations:List*\",\n        \"organizations:Describe*\",\n        \"opsworks:Get*\",\n        \"opsworks:Describe*\",\n        \"opsworks-cm:Describe*\",\n        \"mobiletargeting:Get*\",\n        \"mobilehub:Verify*\",\n        \"mobilehub:Validate*\",\n        \"mobilehub:List*\",\n        \"mobilehub:Get*\",\n        \"mobileanalytics:Get*\",\n        \"machinelearning:Get*\",\n        \"machinelearning:Describe*\",\n        \"logs:TestMetricFilter\",\n        \"logs:ListTagsLogGroup\",\n        \"logs:Get*\",\n        \"logs:FilterLogEvents\",\n        \"logs:Describe*\",\n        \"lightsail:Is*\",\n        \"lightsail:Get*\",\n        \"lightsail:Download*\",\n        \"lex:Get*\",\n        \"lambda:List*\",\n        \"lambda:Get*\",\n        \"kms:List*\",\n        \"kms:Get*\",\n        \"kms:Describe*\",\n        \"kinesisanalytics:List*\",\n        \"kinesisanalytics:Get*\",\n        \"kinesisanalytics:Discover*\",\n        \"kinesisanalytics:Describe*\",\n        \"kinesis:List*\",\n        \"kinesis:Get*\",\n        \"kinesis:Describe*\",\n        \"iot:List*\",\n        \"iot:Get*\",\n        \"iot:Describe*\",\n        \"inspector:Preview*\",\n        \"inspector:LocalizeText\",\n        \"inspector:List*\",\n        \"inspector:Get*\",\n        \"inspector:Describe*\",\n        \"importexport:List*\",\n        \"importexport:Get*\",\n        \"iam:Simulate*\",\n        \"iam:List*\",\n        \"iam:Get*\",\n        \"iam:Generate*\",\n        \"health:List*\",\n        \"health:Get*\",\n        \"health:Describe*\",\n        \"glacier:List*\",\n        \"glacier:Get*\",\n        \"glacier:Describe*\",\n        \"gamelift:Search*\",\n        \"gamelift:ResolveAlias\",\n        \"gamelift:RequestUploadCredentials\",\n        \"gamelift:List*\",\n        \"gamelift:Get*\",\n        \"gamelift:Describe*\",\n        \"firehose:List*\",\n        \"firehose:Describe*\",\n        \"events:Test*\",\n        \"events:List*\",\n        \"events:Describe*\",\n        \"es:List*\",\n        \"es:ESHttpHead\",\n        \"es:ESHttpGet\",\n        \"es:Describe*\",\n        \"elastictranscoder:Read*\",\n        \"elastictranscoder:List*\",\n        \"elasticmapreduce:View*\",\n        \"elasticmapreduce:List*\",\n        \"elasticmapreduce:Describe*\",\n        \"elasticloadbalancing:Describe*\",\n        \"elasticfilesystem:Describe*\",\n        \"elasticbeanstalk:Validate*\",\n        \"elasticbeanstalk:Retrieve*\",\n        \"elasticbeanstalk:Request*\",\n        \"elasticbeanstalk:List*\",\n        \"elasticbeanstalk:Describe*\",\n        \"elasticbeanstalk:Check*\",\n        \"elasticache:List*\",\n        \"elasticache:Describe*\",\n        \"ecs:List*\",\n        \"ecs:Describe*\",\n        \"ecr:List*\",\n        \"ecr:Get*\",\n        \"ecr:Describe*\",\n        \"ecr:BatchGet*\",\n        \"ecr:BatchCheck*\",\n        \"ec2messages:Get*\",\n        \"ec2:Get*\",\n        \"ec2:Describe*\",\n        \"dynamodb:Scan\",\n        \"dynamodb:Query\",\n        \"dynamodb:List*\",\n        \"dynamodb:Get*\",\n        \"dynamodb:Describe*\",\n        \"dynamodb:BatchGet*\",\n        \"ds:Verify*\",\n        \"ds:List*\",\n        \"ds:Get*\",\n        \"ds:Describe*\",\n        \"ds:Check*\",\n        \"dms:Test*\",\n        \"dms:List*\",\n        \"dms:Describe*\",\n        \"discovery:List*\",\n        \"discovery:Get*\",\n        \"discovery:Describe*\",\n        \"directconnect:Describe*\",\n        \"devicefarm:List*\",\n        \"devicefarm:Get*\",\n        \"datapipeline:Validate*\",\n        \"datapipeline:QueryObjects\",\n        \"datapipeline:List*\",\n        \"datapipeline:Get*\",\n        \"datapipeline:EvaluateExpression\",\n        \"datapipeline:Describe*\",\n        \"connect:List*\",\n        \"connect:Get*\",\n        \"connect:Describe*\",\n        \"config:List*\",\n        \"config:Get*\",\n        \"config:Describe*\",\n        \"config:Deliver*\",\n        \"cognito-sync:QueryRecords\",\n        \"cognito-sync:List*\",\n        \"cognito-sync:Get*\",\n        \"cognito-sync:Describe*\",\n        \"cognito-idp:List*\",\n        \"cognito-idp:Get*\",\n        \"cognito-idp:Describe*\",\n        \"cognito-idp:AdminList*\",\n        \"cognito-identity:Lookup*\",\n        \"cognito-identity:List*\",\n        \"cognito-identity:Describe*\",\n        \"codestar:Verify*\",\n        \"codestar:List*\",\n        \"codestar:Get*\",\n        \"codestar:Describe*\",\n        \"codepipeline:List*\",\n        \"codepipeline:Get*\",\n        \"codedeploy:List*\",\n        \"codedeploy:Get*\",\n        \"codedeploy:BatchGet*\",\n        \"codecommit:List*\",\n        \"codecommit:GitPull\",\n        \"codecommit:Get*\",\n        \"codecommit:BatchGet*\",\n        \"codebuild:List*\",\n        \"codebuild:BatchGet*\",\n        \"cloudwatch:List*\",\n        \"cloudwatch:Get*\",\n        \"cloudwatch:Describe*\",\n        \"cloudtrail:LookupEvents\",\n        \"cloudtrail:List*\",\n        \"cloudtrail:Get*\",\n        \"cloudtrail:Describe*\",\n        \"cloudsearch:List*\",\n        \"cloudsearch:Describe*\",\n        \"cloudhsm:List*\",\n        \"cloudhsm:Get*\",\n        \"cloudhsm:Describe*\",\n        \"cloudfront:List*\",\n        \"cloudfront:Get*\",\n        \"cloudformation:Preview*\",\n        \"cloudformation:List*\",\n        \"cloudformation:Get*\",\n        \"cloudformation:Estimate*\",\n        \"cloudformation:Describe*\",\n        \"clouddirectory:LookupPolicy\",\n        \"clouddirectory:List*\",\n        \"clouddirectory:Get*\",\n        \"clouddirectory:BatchRead\",\n        \"batch:List*\",\n        \"batch:Describe*\",\n        \"autoscaling:Describe*\",\n        \"athena:List*\",\n        \"athena:Get*\",\n        \"athena:Batch*\",\n        \"appstream:List*\",\n        \"appstream:Get*\",\n        \"appstream:Describe*\",\n        \"application-autoscaling:Describe*\",\n        \"apigateway:GET\",\n        \"acm:List*\",\n        \"acm:Get*\",\n        \"acm:Describe*\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}"

+ module.trustor_readonly.aws_iam_policy_attachment.mod
id:                                          <computed>
name:                                        "TXIReadOnlyCrossAccountAdminAccess"
policy_arn:                                  "${aws_iam_policy.mod.arn}"
roles.#:                                     "1"
roles.2278642087:                            "TXIReadOnlyCrossAccountAccessRole"

+ module.trustor_readonly.aws_iam_role.mod
id:                                          <computed>
arn:                                         <computed>
assume_role_policy:                          "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::000000000000:root\"\n      }\n    }\n  ]\n}"
create_date:                                 <computed>
force_detach_policies:                       "false"
max_session_duration:                        "3600"
name:                                        "TXIReadOnlyCrossAccountAccessRole"
path:                                        "/"
unique_id:                                   <computed>

+ module.vpc.aws_internet_gateway.mod
id:                                          <computed>
tags.%:                                      "1"
tags.Name:                                   "vpc"
vpc_id:                                      "${aws_vpc.mod.id}"

+ module.vpc.aws_vpc.mod
id:                                          <computed>
arn:                                         <computed>
assign_generated_ipv6_cidr_block:            "false"
cidr_block:                                  "10.0.0.0/16"
default_network_acl_id:                      <computed>
default_route_table_id:                      <computed>
default_security_group_id:                   <computed>
dhcp_options_id:                             <computed>
enable_classiclink:                          <computed>
enable_classiclink_dns_support:              <computed>
enable_dns_hostnames:                        "true"
enable_dns_support:                          "true"
instance_tenancy:                            "default"
ipv6_association_id:                         <computed>
ipv6_cidr_block:                             <computed>
main_route_table_id:                         <computed>
tags.%:                                      "1"
tags.Name:                                   "vpc"
Plan: 61 to add, 1 to change, 0 to destroy.

